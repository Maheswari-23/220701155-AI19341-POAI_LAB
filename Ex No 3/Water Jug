def dfs_water_jug(jug1_capacity,jug2_capacity,target):
    visited=set()
    solution=[]
    def dfs(jug1,jug2):
        if (jug1,jug2)in visited:
           return False
        visited.add((jug1,jug2))
        solution.append((jug1,jug2))
     
        if jug1==target or jug2==target:
           return True
        next_states=[(jug1_capacity,jug2),(jug1,jug2_capacity),(0,jug2),(jug1,0),
            (max(0,jug1-(jug2_capacity-jug2)),min(jug2_capacity,jug2+jug1)),(min(jug1_capacity,jug1+jug2),max(0,jug2-(jug1_capacity-jug1)))]

        for state in next_states:
                     if dfs(state[0],state[1]):
                        return True
        solution.pop()
        return False
    if dfs(0,0):
       return solution
    else:
       return "No solution exists"
steps=dfs_water_jug(4,3,2)
for i,step in enumerate(steps):
      print("step:",i+1,"j1-",step[0],"j2-",step[1])
    
